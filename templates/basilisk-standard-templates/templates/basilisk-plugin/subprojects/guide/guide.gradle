buildscript {
    repositories {
        jcenter()
        maven { url 'http://dl.bintray.com/content/bmuschko/maven' }
        maven { url 'http://dl.bintray.com/content/bmuschko/gradle-plugins' }
    }

    dependencies {
        classpath 'org.asciidoctor:asciidoctor-gradle-plugin:1.5.2'
        classpath 'com.bmuschko:gradle-java2html-plugin:2.0'
    }
}

apply plugin: 'org.asciidoctor.convert'
apply plugin: 'com.bmuschko.java2html'

ext.childProjects = [
    ':basilisk-${plugin_name}-core'
]

ext.childProjects.each { evaluationDependsOn it }

dependencies {
    java2html 'de.java2html:java2html:5.0'
}

task copyDocs(type: Copy) {
    destinationDir = "\${buildDir}/sources" as File
    project.ext.childProjects.each { projectName ->
        if (projectName.endsWith('-compile')) {
            from(project(projectName).sourceSets.main.allSource) {
                include 'basilisk/transform/**/*'
                include 'basilisk/metadata/**/*'
            }
        } else {
            from(project(projectName).sourceSets.main.allSource) {
                include '**/*.java'
                include '**/*.groovy'
                include '**/*.html'
            }
        }
    }
}

task apiDocs(type: Javadoc, dependsOn: copyDocs) {
    source = copyDocs.destinationDir
    destinationDir = file("\${buildDir}/api")
    title = "\${pluginBaseName} \${project.version}"
    classpath = project.ext.childProjects.collect { projectName ->
        [project(projectName).sourceSets.main.output,
         project(projectName).configurations.compile,
         project(projectName).configurations.compileOnly]
    }.flatten().sum() as FileCollection

    excludes = ['**/*.html', 'META-INF/**', '**/*.groovy']

    options.use = true
    options.splitIndex = true
    options.encoding = 'UTF-8'
    options.author = true
    options.version = true
    options.source = project.sourceCompatibility
    options.overview = file('src/javadoc/overview.html')
    options.windowTitle = "\${pluginBaseName} \${project.version}"
    options.docTitle = "\${pluginBaseName} \${project.version}"
    options.footer = project.javadocFooter
    options.links = ['http://www.slf4j.org/apidocs/',
                     'http://junit.org/javadoc/latest/',
                     'http://jsr-305.googlecode.com/svn/trunk/javadoc/',
                     'http://atinject.googlecode.com/svn/trunk/javadoc/',
                     'http://docs.oracle.com/javase/8/docs/api/',
                     'http://docs.oracle.com/javase/8/javafx/api/',
                     'http://docs.groovy-lang.org/latest/html/api/',
                     'http://aalmiray.github.io/jipsy/apidocs/',
                     'http://aalmiray.github.io/gipsy/apidocs/']

    doLast { task ->
        copy {
            into task.destinationDir
            from file('src/javadoc/resources/img/basilisk.ico'),
                file('src/javadoc/resources/css/stylesheet.css')
        }
        copy {
            into file("\${task.destinationDir}/resources")
            from file('src/javadoc/resources/img/')
        }
    }
}

task generateJava2html {
    dependsOn apiDocs
    dependsOn "java2htmlGenerateOverview"
    dependsOn java2htmlConvertCode
}

task javadocJar(type: Jar, dependsOn: apiDocs) {
    archiveName = "\${pluginBaseName}-plugin-\${version}-javadoc.jar"
    destinationDir = "\${buildDir}/assemble/jars" as File
    from apiDocs.destinationDir
}

task sourceHtmlJar(type: Jar, dependsOn: java2html) {
    archiveName = "\${pluginBaseName}-plugin-\${version}-sources-html.jar"
    destinationDir = "\${buildDir}/assemble/jars" as File
    from java2htmlConvertCode.destDir
}

task docsJar(dependsOn: [javadocJar, sourceHtmlJar]) {}

java2html {
    conversion {
        srcDirs = files(copyDocs.destinationDir)
        tabs = 4
        style = 'kawa'
        addLineAnchors = true
        showFileName = true
        useShortFileName = true
        overwrite = true
        showDefaultTitle = true
    }

    overview {
        windowTitle = "\${pluginBaseName} \${project.version}"
        docTitle = "\${pluginBaseName} \${project.version}"
        docDescription = "\${pluginBaseName} \${project.version}"
        icon = file('src/javadoc/resources/img/basilisk.ico')
        stylesheet = file('src/javadoc/resources/css/stylesheet.css')
    }
}

asciidoctor {
    attributes = [
        toc                    : 'left',
        doctype                : 'book',
        icons                  : 'font',
        encoding               : 'utf-8',
        sectlink               : true,
        sectanchors            : true,
        numbered               : true,
        linkattrs              : true,
        imagesdir              : 'images',
        linkcss                : true,
        stylesheet             : 'css/style.css',
        'source-highlighter'   : 'coderay',
        'coderay-linenums-mode': 'table',
        'project-title'        : project.projectDescription,
        'project-author'       : '${project_author}',
        'project-url'          : project.projectWebsiteUrl,
        'project-vcs'          : project.projectVcsUrl,
        'project-issue-tracker': project.projectIssueTrackerUrl,
        'basilisk-version'     : rootProject.basiliskVersion
    ]
    sources {
        include 'index.adoc'
    }
    resources {
        from file('src/docs/resources')
    }
}

task guide(type: Copy, dependsOn: [apiDocs, generateJava2html, asciidoctor]) {
    destinationDir = "\${buildDir}/guide" as File
    from(apiDocs.destinationDir) { into 'api' }
    from(java2htmlConvertCode.destDir) { into 'api-src' }
    from("\${asciidoctor.outputDir}/html5")
}

task guideZip(type: Zip, dependsOn: guide) {
    baseName = "\${pluginBaseName}-guide"
    from guide.destinationDir
}