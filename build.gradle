/*
 * Copyright 2008-2015 the original author or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

import java.text.SimpleDateFormat

apply from: 'gradle/idea.gradle'

buildscript {
    repositories {
        jcenter()
        maven { url 'http://dl.bintray.com/pledbrook/plugins' }
    }

    dependencies {
        classpath 'net.saliman:gradle-cobertura-plugin:2.2.8'
        classpath 'org.kt3k.gradle.plugin:coveralls-gradle-plugin:2.4.0'
        classpath 'nl.javadude.gradle.plugins:license-gradle-plugin:0.11.0'
        classpath 'com.jfrog.bintray.gradle:gradle-bintray-plugin:1.3.1'
        classpath 'org.ajoberstar:gradle-git:1.3.1'
        classpath 'uk.co.cacoethes:lazybones-gradle:1.2.4'
        classpath 'org.kordamp.gradle:stats-gradle-plugin:0.1.5'
        classpath 'com.github.ben-manes:gradle-versions-plugin:0.11.3'
        classpath 'org.kordamp.gradle:clirr-gradle-plugin:0.2.3'
        classpath 'net.nemerosa:versioning:1.6.0'
    }
}

apply plugin: 'jacoco'
apply plugin: 'com.github.kt3k.coveralls'

jacoco {
    toolVersion = jacocoVersion
}

boolean travis = (System.env['TRAVIS'] ?: false) as boolean
boolean appveyor = (System.env['APPVEYOR'] ?: false) as boolean
Date buildTimeAndDate = new Date()
ext {
    buildDate = new SimpleDateFormat('yyyy-MM-dd').format(buildTimeAndDate)
    buildTime = new SimpleDateFormat('HH:mm:ss.SSSZ').format(buildTimeAndDate)
    projectsWithCoverage = []
    projectsWithIntegrationCoverage = []
    projectsWithFunctionalCoverage = []
    projectsWithClirr = []
    depProjects = []
    fullBuild = !travis && !appveyor
}

allprojects {
    apply plugin: 'base'
    apply plugin: 'idea'
    apply plugin: 'com.github.ben-manes.versions'

    repositories {
        jcenter()
        maven { url 'https://dl.bintray.com/melix/thirdparty-apache' }
    }

    if (JavaVersion.current().isJava8Compatible()) {
        tasks.withType(Javadoc) {
            options.addStringOption('Xdoclint:none', '-quiet')
        }
    }
}

subprojects { subproj ->
    plugins.withType(JavaPlugin) {
        configurations {
            compileOnly
            testCompileOnly
        }

        subproj.tasks.withType(JavaCompile) {
            sourceCompatibility = subproj.sourceCompatibility
            targetCompatibility = subproj.targetCompatibility
        }

        subproj.tasks.withType(GroovyCompile) {
            sourceCompatibility = subproj.sourceCompatibility
            targetCompatibility = subproj.targetCompatibility
        }

        dependencies {
            testCompile 'junit:junit:4.12'
            testCompile 'com.google.guiceberry:guiceberry:3.3.1'
            testCompile("com.google.inject:guice:$guiceVersion") {
                exclude group: 'org.sonatype.sisu.inject', module: 'cglib'
            }
            if (!subproj.name.startsWith('gradle-')) {
                testCompile "org.codehaus.groovy:groovy-all:$groovyVersion"
                testCompile('org.spockframework:spock-core:1.0-groovy-2.4') {
                    exclude group: 'org.codehaus.groovy', module: 'groovy-all'
                }
            }
            testCompile "org.slf4j:slf4j-simple:$slf4jVersion"
            testCompile 'cglib:cglib-nodep:3.1'
        }

        sourceSets {
            main {
                compileClasspath += [configurations.compileOnly]
            }
            test {
                compileClasspath += [configurations.testCompileOnly]
            }
        }

        javadoc {
            classpath += [configurations.compileOnly]
        }

        idea {
            module {
                scopes.PROVIDED.plus += [configurations.compileOnly]
                scopes.PROVIDED.plus += [configurations.testCompileOnly]
            }
        }

        processResources {
            from(sourceSets.main.resources.srcDirs) {
                exclude '**/*.properties'
                exclude '**/*.xml'
            }
            from(sourceSets.main.resources.srcDirs) {
                include '**/*.properties'
                include '**/*.xml'
                filter(org.apache.tools.ant.filters.ReplaceTokens, tokens: [
                    'application.name'   : project.name,
                    'application.version': project.version,
                    'basilisk.version'   : project.version
                ])
            }
        }

        processTestResources {
            from(sourceSets.test.resources.srcDirs) {
                exclude '**/*.properties'
                exclude '**/*.xml'
            }
            from(sourceSets.test.resources.srcDirs) {
                include '**/*.properties'
                include '**/*.xml'
                filter(org.apache.tools.ant.filters.ReplaceTokens, tokens: [
                    'application.name'   : project.name,
                    'application.version': project.version,
                    'basilisk.version'   : project.version
                ])
            }
        }

        task sourceJar(type: Jar) {
            group 'Build'
            description 'An archive of the source code'
            classifier 'sources'
            from sourceSets.main.allSource
        }

        tasks.withType(AbstractCompile) {
            if (rootProject.hasProperty('lint') && rootProject.lint.toBoolean()) {
                options.compilerArgs = [
                    '-Xlint:all', '-Xlint:deprecation', '-Xlint:unchecked'
                ]
            }
        }

        subproj.apply from: rootProject.file('gradle/publish.gradle')
        subproj.apply from: rootProject.file('gradle/code-quality.gradle')

        if (subproj.publishJars.toBoolean()) {
            if (subproj.name.startsWith('basilisk-')) {
                subproj.apply plugin: 'org.kordamp.gradle.clirr'

                subproj.clirr {
                    failOnErrors = false
                }

                projectsWithClirr << subproj
            }

            projectsWithCoverage << subproj

            test {
                testLogging {
                    afterSuite { desc, result ->
                        if (!desc.parent) {
                            println "Test results ${project.name}: ${result.resultType} (${result.testCount} tests, ${result.successfulTestCount} passed, ${result.failedTestCount} failed, ${result.skippedTestCount} skipped)"
                        }
                    }
                }
            }

            javadoc {
                excludes = ['**/*.html', 'META-INF/**']

                options.addBooleanOption('javafx', true)

                options.use = true
                options.splitIndex = true
                options.encoding = 'UTF-8'
                options.author = true
                options.version = true
                options.windowTitle = "$subproj.pomDescription $version"
                options.docTitle = "$subproj.pomDescription $version"
                options.footer = rootProject.javadocFooter
                options.links = ['http://www.slf4j.org/apidocs/',
                                 'http://junit.org/javadoc/latest/',
                                 'http://jsr-305.googlecode.com/svn/trunk/javadoc/',
                                 'http://atinject.googlecode.com/svn/trunk/javadoc/',
                                 'http://docs.oracle.com/javase/8/docs/api/',
                                 'http://docs.oracle.com/javase/8/javafx/api/',
                                 'http://google.github.io/guice/api-docs/4.0/javadoc/',
                                 'http://aalmiray.github.io/jipsy/apidocs/']

                doLast { task ->
                    copy {
                        into task.destinationDir
                        from rootProject.file('src/javadoc/resources/img/basilisk.ico'),
                            rootProject.file('src/javadoc/resources/css/stylesheet.css')
                    }
                    copy {
                        into file("${task.destinationDir}/resources")
                        from rootProject.file('src/javadoc/resources/img/')
                    }
                }
            }
        }

        subproj.apply plugin: 'org.kordamp.gradle.stats'
        if (subproj.projectDir.parentFile.name == 'samples') {
            def statsTask = subproj.tasks.findByName('stats')
            statsTask.formats = ['txt']
            statsTask.paths += [
                model     : [name: 'Models', path: 'basilisk-app/models'],
                view      : [name: 'Views', path: 'basilisk-app/views'],
                controller: [name: 'Controllers', path: 'basilisk-app/controllers'],
                service   : [name: 'Services', path: 'basilisk-app/services'],
                config    : [name: 'Configuration', path: 'basilisk-app/conf'],
                lifecycle : [name: 'Lifecycle', path: 'basilisk-app/lifecycle']
            ]
        }
    }
}

evaluationDependsOnChildren()

coveralls {
    sourceDirs = files(projectsWithCoverage.sourceSets.main.allSource.srcDirs).files.absolutePath
}

task jacocoRootReport(type: org.gradle.testing.jacoco.tasks.JacocoReport) {
    dependsOn = projectsWithCoverage.test + projectsWithIntegrationCoverage.integrationTest + projectsWithFunctionalCoverage.functionalTest
    group = "Reporting"
    description = "Aggregate Jacoco coverage reports."
    additionalSourceDirs = files(projectsWithCoverage.sourceSets.main.allSource.srcDirs)
    sourceDirectories = files(projectsWithCoverage.sourceSets.main.allSource.srcDirs)
    classDirectories = files(projectsWithCoverage.sourceSets.main.output)
    executionData = files([
        projectsWithCoverage.jacocoTestReport +
            projectsWithIntegrationCoverage.jacocoIntegrationTestReport +
            projectsWithFunctionalCoverage.jacocoFunctionalTestReport
    ].executionData)
    reports {
        html.enabled = true
        xml.enabled = true
        csv.enabled = false
        html.destination = "${buildDir}/reports/jacoco/test/html"
        xml.destination = "${buildDir}/reports/jacoco/test/jacocoTestReport.xml"
    }
}

task clirrRootReport(type: org.kordamp.gradle.clirr.ClirrReportTask) {
    dependsOn = projectsWithClirr.tasks.clirr
    reports = files(projectsWithClirr.findAll { it.extensions.clirr.enabled }.tasks.clirr.xmlReport)
    filter = { difference -> !(difference?.classname?.text() =~ /basilisk/) }
}
